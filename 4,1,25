Question 1)https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/submissions/1497655025

int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<vector<pair<int, int>>> graph(n);
    for (auto& edge : edges) {
        int u = edge[0], v = edge[1], w = edge[2];
        graph[u].push_back({v, w});
        graph[v].push_back({u, w});
    }

    auto computeReachable = [&](int start) {
        vector<int> dist(n, INT_MAX);
        dist[start] = 0;
        queue<int> q;
        q.push(start);

        while (!q.empty()) {
            int u = q.front(); q.pop();
            for (auto& [v, w] : graph[u]) {
                if (dist[u] + w < dist[v] && dist[u] + w <= distanceThreshold) {
                    dist[v] = dist[u] + w;
                    q.push(v);
                }
            }
        }

        return count_if(dist.begin(), dist.end(), [&](int d) { return d <= distanceThreshold; });
    };

    int minNeighbors = INT_MAX, resultCity = -1;
    for (int i = 0; i < n; ++i) {
        int reachable = computeReachable(i);
        if (reachable < minNeighbors || (reachable == minNeighbors && i > resultCity)) {
            minNeighbors = reachable;
            resultCity = i;
        }
    }
    return resultCity;
    }

NOTE -> Learnt BFS, still a bit difficult, will be able to understand post practice, 

Question 2) https://leetcode.com/problems/count-the-number-of-incremovable-subarrays-i/submissions/1497671202

long long incremovableSubarrayCount(vector<int>& nums) {
        int n = nums.size();
        vector<int> start, end;
        
        for (int i = 0; i < n; ++i) {
            if (start.empty() || start.back() < nums[i]) {
                start.push_back(nums[i]);
            } else {
                break;
            }
        }
        
        for (int i = n - 1; i >= 0; --i) {
            if (end.empty() || end.back() > nums[i]) {
                end.push_back(nums[i]);
            } else {
                break;
            }
        }
        
        if (start.size() + end.size() > n) {
            return 1LL * n * (n + 1) / 2;
        }
        
        long long ans = start.size() + end.size();
        int i = 0, j = 0;
        
        reverse(end.begin(), end.end());
        
        while (i < start.size() && j < end.size()) {
            if (start[i] < end[j]) {
                ans += end.size() - j;
                ++i;
            } else {
                ++j;
            }
        }
        
        return ans + 1;
    }

NOTE-> half understood, needs revison, will revisit this appraoch, noted :)

Thank you,
