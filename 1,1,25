first question -> https://leetcode.com/problems/circle-and-rectangle-overlapping/submissions/1494340358

1401. Circle and Rectangle Overlapping
Solved
Medium
Topics
Companies
Hint
You are given a circle represented as (radius, xCenter, yCenter) and an axis-aligned rectangle represented as (x1, y1, x2, y2), where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the rectangle.

Return true if the circle and rectangle are overlapped otherwise return false. In other words, check if there is any point (xi, yi) that belongs to the circle and the rectangle at the same time.

Example 1:

Input: radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1
Output: true
Explanation: Circle and rectangle share the point (1,0).

code sollution -> 

class Solution {
public:
    bool checkOverlap(int radius, int xCenter, int yCenter, int x1, int y1, int x2, int y2) {
    // Find the closest point on the rectangle to the circle's center
    int xClosest = max(x1, min(xCenter, x2));
    int yClosest = max(y1, min(yCenter, y2));

    // Compute the squared distance from the circle's center to this closest point
    int distanceSquared = (xClosest - xCenter) * (xClosest - xCenter) + 
                          (yClosest - yCenter) * (yClosest - yCenter);

    // Check if the squared distance is less than or equal to the circle's radius squared
    return distanceSquared <= radius * radius;
}
};

Note-> main logic was mathematical, using area, and figuring out the nearest point.

Second Quesiton ->https://leetcode.com/problems/find-the-winner-of-the-circular-game/submissions/1494364778

1823. Find the Winner of the Circular Game
Solved
Medium
Topics
Companies
Hint
There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.

The rules of the game are as follows:

Start at the 1st friend.
Count the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.
The last friend you counted leaves the circle and loses the game.
If there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.
Else, the last friend in the circle wins the game.
Given the number of friends, n, and an integer k, return the winner of the game.

 

Example 1:


Input: n = 5, k = 2
Output: 3
Explanation: Here are the steps of the game:
1) Start at friend 1.
2) Count 2 friends clockwise, which are friends 1 and 2.
3) Friend 2 leaves the circle. Next start is friend 3.
4) Count 2 friends clockwise, which are friends 3 and 4.
5) Friend 4 leaves the circle. Next start is friend 5.
6) Count 2 friends clockwise, which are friends 5 and 1.
7) Friend 1 leaves the circle. Next start is friend 3.
8) Count 2 friends clockwise, which are friends 3 and 5.
9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.

code->
int findTheWinner(int n, int k) {
    int winner = 0; // Base case: J(1, k) = 0 (0-indexed)
    for (int i = 2; i <= n; i++) {
        winner = (winner + k) % i;
    }
    return winner + 1; // Convert to 1-based indexing
}

Note-> concept learnerd, JOSEPHUS FORMULA , 
Josephus Problem Explanation
Problem Setup:
There are 
𝑛
n people standing in a circle.
Starting from a specific person, count 
𝑘
k-th person and remove them from the circle.
After removing the 
𝑘
k-th person, the counting resumes from the next person in the circle.
Repeat the process until only one person is left.
The goal is to find out the position of the last remaining person.

Third Questiion -> https://leetcode.com/problems/russian-doll-envelopes/submissions/1494371528

Note-> Detailed Explanation of Steps:
Sort the envelopes:
Sort by width in ascending order, but for envelopes with the same width, sort by height in descending order. This ensures we avoid invalid nesting due to the same width.
Find the LIS on heights:
After sorting, the problem becomes one of finding the Longest Increasing Subsequence of the heights. This can be done in O(n log n) time using binary search.
Why Sort the Heights in Descending Order for Equal Widths?
This step is essential to avoid counting multiple envelopes with the same width and height as distinct, which would violate the nesting rule. By sorting them in descending order, we ensure that if two envelopes have the same width, we do not count both as part of the same subsequence.
