Day2:-

QUESTION 1) https://leetcode.com/problems/image-smoother/submissions/1495420656

class Solution {
public:
    vector<vector<int>> imageSmoother(vector<vector<int>>& img) {
        int m = img.size(), n = img[0].size();
        vector<vector<int>> result(m, vector<int>(n, 0));
        
        // Directions for 3x3 neighborhood
        vector<pair<int, int>> directions = {
            {-1, -1}, {-1, 0}, {-1, 1},
            { 0, -1}, { 0, 0}, { 0, 1},
            { 1, -1}, { 1, 0}, { 1, 1}
        };
        
        // Iterate over each cell
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int sum = 0, count = 0;
                
                // Check all neighbors
                for (auto& dir : directions) {
                    int x = i + dir.first;
                    int y = j + dir.second;
                    
                    // Check bounds
                    if (x >= 0 && x < m && y >= 0 && y < n) {
                        sum += img[x][y];
                        ++count;
                    }
                }
                
                // Compute the smoothed value
                result[i][j] = sum / count;
            }
        }
        
        return result;
    }
};

NOTE:-Algorithm
Create a new matrix result of the same size as the input matrix img.
Iterate over all cells (i, j) in the matrix.
For each cell:
Iterate through its 3x3 neighborhood using the offsets.
Add valid neighbors' values to a running sum and count them.
Compute the floor of the average using sum // count and store it in the corresponding cell of result.
Return result.

QUESTION 2)https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii/submissions/1495394416

class Solution {
public:
    int minMoves2(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        sort(nums.begin(), nums.end());
        int check = nums[n/2];
        for(int i=0; i<n; i++) {
            if(nums[i] != check){
                ans += abs(check - nums[i]);
            }
        }
        return ans;
    }
};

NOTE-> above given is the optimized one, that uses median, mine was using for loops and involves lot of checkkinh, although it was passing all but was not optimized.

QUESTION 3) https://leetcode.com/problems/bulls-and-cows/submissions/1495425106

class Solution {
public:
    string getHint(string secret, string guess) {
        int bull = 0, cows = 0;
        unordered_map<char, int> mp;

        // First pass: count bulls and prepare the map for cows
        for (int i = 0; i < guess.size(); i++) {
            if (secret[i] == guess[i]) {
                bull++;
            } else {
                mp[secret[i]]++;  // Count occurrences of non-bull secret characters
            }
        }

        // Second pass: count cows (those that match in value but not position)
        for (int i = 0; i < guess.size(); i++) {
            if (secret[i] != guess[i] && mp[guess[i]] > 0) {
                cows++;
                mp[guess[i]]--;  // Decrement the count to prevent double-counting
            }
        }

        // Return the hint in the "xAyB" format
        return to_string(bull) + "A" + to_string(cows) + "B";
    }
};

NOTE->  this is what i thought, but, actually, there can be further optimization that can be done, looking at the fixed no. of values being repeated, like 0-9 so optimized will be the last submitted link, :)

THANK YOU @arshGoyal
